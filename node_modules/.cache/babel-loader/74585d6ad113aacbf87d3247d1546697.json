{"ast":null,"code":"import _regeneratorRuntime from \"D:\\\\\\u041E\\u0431\\u0440\\u0430\\u0437\\u043E\\u0432\\u0430\\u043D\\u0438\\u0435\\\\\\u0412\\u043A\\u0430\\u0442 \\u0432 IT\\\\\\u0422\\u0435\\u0441\\u0442\\u043E\\u0432\\u044B\\u0435\\\\RosumSystems\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"D:\\\\\\u041E\\u0431\\u0440\\u0430\\u0437\\u043E\\u0432\\u0430\\u043D\\u0438\\u0435\\\\\\u0412\\u043A\\u0430\\u0442 \\u0432 IT\\\\\\u0422\\u0435\\u0441\\u0442\\u043E\\u0432\\u044B\\u0435\\\\RosumSystems\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport _objectSpread from \"D:\\\\\\u041E\\u0431\\u0440\\u0430\\u0437\\u043E\\u0432\\u0430\\u043D\\u0438\\u0435\\\\\\u0412\\u043A\\u0430\\u0442 \\u0432 IT\\\\\\u0422\\u0435\\u0441\\u0442\\u043E\\u0432\\u044B\\u0435\\\\RosumSystems\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport { getWorklog } from \"../api\";\nvar SET_WORKING_LOG = \"SET_WORKING_LOG\";\nvar initialState = {\n  isLoaded: false,\n  workingLog: []\n};\n\nvar workLogReducer = function workLogReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case SET_WORKING_LOG:\n      console.log('worklog loading');\n      return _objectSpread({}, state, {\n        isLoaded: true,\n        workingLog: action.workingLog\n      });\n      break;\n\n    default:\n      return state;\n  }\n\n  return state;\n};\n\nexport default workLogReducer;\nexport var setWorkingLog = function setWorkingLog(workingLog) {\n  return {\n    type: SET_WORKING_LOG,\n    workingLog: workingLog\n  };\n};\nexport var getWorkingLogData = function getWorkingLogData() {\n  return /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(dispatch) {\n      var data;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return getWorklog();\n\n            case 2:\n              data = _context.sent;\n              dispatch(setWorkingLog(data));\n\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function (_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n};","map":{"version":3,"sources":["D:/Образование/Вкат в IT/Тестовые/RosumSystems/src/redux/reducerW.js"],"names":["getWorklog","SET_WORKING_LOG","initialState","isLoaded","workingLog","workLogReducer","state","action","type","console","log","setWorkingLog","getWorkingLogData","dispatch","data"],"mappings":";;;AAAA,SAAQA,UAAR,QAAyB,QAAzB;AAEA,IAAMC,eAAe,GAAG,iBAAxB;AAEA,IAAIC,YAAY,GAAG;AACfC,EAAAA,QAAQ,EAAE,KADK;AAEfC,EAAAA,UAAU,EAAE;AAFG,CAAnB;;AAKA,IAAMC,cAAc,GAAG,SAAjBA,cAAiB,GAAkC;AAAA,MAAjCC,KAAiC,uEAAzBJ,YAAyB;AAAA,MAAXK,MAAW;;AACrD,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKP,eAAL;AACIQ,MAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ;AACA,+BACOJ,KADP;AAEIH,QAAAA,QAAQ,EAAE,IAFd;AAGIC,QAAAA,UAAU,EAAEG,MAAM,CAACH;AAHvB;AAKA;;AACJ;AACI,aAAOE,KAAP;AAVR;;AAYA,SAAOA,KAAP;AACH,CAdD;;AAgBA,eAAeD,cAAf;AAGA,OAAO,IAAMM,aAAa,GAAG,SAAhBA,aAAgB,CAACP,UAAD;AAAA,SAAiB;AAACI,IAAAA,IAAI,EAAEP,eAAP;AAAwBG,IAAAA,UAAU,EAAVA;AAAxB,GAAjB;AAAA,CAAtB;AAEP,OAAO,IAAMQ,iBAAiB,GAAG,SAApBA,iBAAoB,GAAM;AACnC;AAAA,wEAAO,iBAAMC,QAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBACcb,UAAU,EADxB;;AAAA;AACCc,cAAAA,IADD;AAEHD,cAAAA,QAAQ,CAACF,aAAa,CAACG,IAAD,CAAd,CAAR;;AAFG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAP;;AAAA;AAAA;AAAA;AAAA;AAIH,CALM","sourcesContent":["import {getWorklog} from \"../api\";\r\n\r\nconst SET_WORKING_LOG = \"SET_WORKING_LOG\"\r\n\r\nlet initialState = {\r\n    isLoaded: false,\r\n    workingLog: []\r\n}\r\n\r\nconst workLogReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case SET_WORKING_LOG:\r\n            console.log('worklog loading');\r\n            return {\r\n                ...state,\r\n                isLoaded: true,\r\n                workingLog: action.workingLog\r\n            }\r\n            break;\r\n        default:\r\n            return state;\r\n    }\r\n    return state;\r\n}\r\n\r\nexport default workLogReducer;\r\n\r\n\r\nexport const setWorkingLog = (workingLog) => ({type: SET_WORKING_LOG, workingLog});\r\n\r\nexport const getWorkingLogData = () => {\r\n    return async dispatch => {\r\n        let data = await getWorklog();\r\n        dispatch(setWorkingLog(data));\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}